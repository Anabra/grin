
idris_int_eq idris_int_eq0 idris_int_eq1 =
  (CGrInt idris_int_eq0_1) <- fetch idris_int_eq0
  (CGrInt idris_int_eq1_1) <- fetch idris_int_eq1
  idris_int_eq2 <- _prim_int_eq $ idris_int_eq0_1 idris_int_eq1_1
  case idris_int_eq2 of
    #False ->
      v.0 <- pure (CGrInt 0)
      pure v.0
    #True ->
      v.1 <- pure (CGrInt 1)
      pure v.1

idris_int_lt idris_int_lt0 idris_int_lt1 =
  (CGrInt idris_int_lt0_1) <- fetch idris_int_lt0
  (CGrInt idris_int_lt1_1) <- fetch idris_int_lt1
  idris_int_lt2 <- _prim_int_lt $ idris_int_lt0_1 idris_int_lt1_1
  case idris_int_lt2 of
    #False ->
      v.2 <- pure (CGrInt 0)
      pure v.2
    #True ->
      v.3 <- pure (CGrInt 1)
      pure v.3

idris_int_add idris_int_add0 idris_int_add1 =
  (CGrInt idris_int_add0_1) <- fetch idris_int_add0
  (CGrInt idris_int_add1_1) <- fetch idris_int_add1
  idris_int_add2 <- _prim_int_add $ idris_int_add0_1 idris_int_add1_1
  v.4 <- pure (CGrInt idris_int_add2)
  pure v.4

idris_write_str idris_write_str1 idris_write_str2 =
  (CGrString idris_write_str2_0) <- fetch idris_write_str2
  _prim_string_print $ idris_write_str2_0
  v.5 <- pure (CUnit)
  pure v.5

idris_str_concat idris_str_concat1 idris_str_concat2 =
  (CGrString idris_str_concat1_0) <- fetch idris_str_concat1
  (CGrString idris_str_concat2_0) <- fetch idris_str_concat2
  idris_str_concat3 <- _prim_string_concat $ idris_str_concat1_0 idris_str_concat2_0
  v.6 <- pure (CGrString idris_str_concat3)
  pure v.6

idris_str_eq idris_str_eq1 idris_str_eq2 =
  (CGrString idris_str_eq1_0) <- fetch idris_str_eq1
  (CGrString idris_str_eq2_0) <- fetch idris_str_eq2
  idris_str_eq3 <- _prim_string_eq $ idris_str_eq1_0 idris_str_eq2_0
  v.7 <- pure (CGrInt idris_str_eq3)
  pure v.7

idris_str_head idris_str_head1 =
  (CGrString idris_str_head1_0) <- fetch idris_str_head1
  idris_str_head2 <- _prim_string_head $ idris_str_head1_0
  v.8 <- pure (CGrInt idris_str_head2)
  pure v.8

idris_int_str idris_int_str1 =
  (CGrInt idris_int_str1_0) <- fetch idris_int_str1
  idris_int_str2 <- _prim_int_str $ idris_int_str1_0
  v.9 <- pure (CGrString idris_int_str2)
  pure v.9

grinMain =
  r <- "idr_{runMain_0}" $
  pure ()

idr_Main.main =
  v.10 <- pure (CErased)
  idr_Main.main0_val <- pure v.10
  idr_Main.main0 <- store v.10
  v.11 <- pure (CErased)
  idr_Main.main1_val <- pure v.11
  idr_Main.main1 <- store v.11
  v.12 <- pure (C"idr_{U_Main.{main_0}_1}")
  idr_Main.main2_val <- pure v.12
  idr_Main.main2 <- store v.12
  v.13 <- pure (CGrInt 1)
  idr_Main.main3_val_4 <- pure v.13
  idr_Main.main3 <- store v.13
  v.14 <- pure (CGrInt 10000)
  idr_Main.main4_val <- pure v.14
  idr_Main.main4 <- store v.14
  idr_Main.main3_val_3 <- idr_Main.upto $ idr_Main.main3 idr_Main.main4
  idr_Main.main3_5 <- store idr_Main.main3_val_3
  idr_Main.main3_val <- idr_Main.sum $ idr_Main.main3_5
  idr_Main.main3_6 <- store idr_Main.main3_val
  v.15 <- pure (C"idr_{U_Prelude.Interactive.printLn'_1}" idr_Main.main0 idr_Main.main1 idr_Main.main2 idr_Main.main3_6)
  pure v.15

idr_Prelude.Show.primNumShow idr_Prelude.Show.primNumShow0 idr_Prelude.Show.primNumShow1 idr_Prelude.Show.primNumShow2 idr_Prelude.Show.primNumShow3 =
  idr_Prelude.Show.primNumShow4_val <- "idr_{APPLY_0}" $ idr_Prelude.Show.primNumShow1 idr_Prelude.Show.primNumShow3
  idr_Prelude.Show.primNumShow4 <- store idr_Prelude.Show.primNumShow4_val
  idr_Prelude.Show.primNumShow2_val <- fetch idr_Prelude.Show.primNumShow2
  idr_Prelude.Show.primNumShow5_val_9 <- case idr_Prelude.Show.primNumShow2_val of
    (Cidr_Prelude.Show.App) ->
      v.16 <- pure (CGrInt 6)
      pure v.16
    (Cidr_Prelude.Show.Backtick) ->
      v.17 <- pure (CGrInt 3)
      pure v.17
    (Cidr_Prelude.Show.Dollar) ->
      v.18 <- pure (CGrInt 2)
      pure v.18
    (Cidr_Prelude.Show.Eq) ->
      v.19 <- pure (CGrInt 1)
      pure v.19
    (Cidr_Prelude.Show.Open) ->
      v.20 <- pure (CGrInt 0)
      pure v.20
    (Cidr_Prelude.Show.PrefixMinus) ->
      v.21 <- pure (CGrInt 5)
      pure v.21
    (Cidr_Prelude.Show.User) ->
      v.22 <- pure (CGrInt 4)
      pure v.22
  idr_Prelude.Show.primNumShow5 <- store idr_Prelude.Show.primNumShow5_val_9
  v.23 <- pure (CGrInt 5)
  idr_Prelude.Show.primNumShow6_val <- pure v.23
  idr_Prelude.Show.primNumShow6 <- store v.23
  idr_Prelude.Show.primNumShow5_val_8 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" $ idr_Prelude.Show.primNumShow5 idr_Prelude.Show.primNumShow6
  idr_Prelude.Show.primNumShow5_10 <- store idr_Prelude.Show.primNumShow5_val_8
  idr_Prelude.Show.primNumShow5_val_11 <- fetch idr_Prelude.Show.primNumShow5_10
  idr_Prelude.Show.primNumShow5_val_7 <- case idr_Prelude.Show.primNumShow5_val_11 of
    (Cidr_Prelude.Interfaces.GT) ->
      v.24 <- pure (Cidr_Prelude.Bool.True)
      pure v.24
    #default ->
      idr_Prelude.Show.primNumShow2_val_14 <- fetch idr_Prelude.Show.primNumShow2
      idr_Prelude.Show.primNumShow6_val_13 <- case idr_Prelude.Show.primNumShow2_val_14 of
        (Cidr_Prelude.Show.App) ->
          v.25 <- pure (CGrInt 6)
          pure v.25
        (Cidr_Prelude.Show.Backtick) ->
          v.26 <- pure (CGrInt 3)
          pure v.26
        (Cidr_Prelude.Show.Dollar) ->
          v.27 <- pure (CGrInt 2)
          pure v.27
        (Cidr_Prelude.Show.Eq) ->
          v.28 <- pure (CGrInt 1)
          pure v.28
        (Cidr_Prelude.Show.Open) ->
          v.29 <- pure (CGrInt 0)
          pure v.29
        (Cidr_Prelude.Show.PrefixMinus) ->
          v.30 <- pure (CGrInt 5)
          pure v.30
        (Cidr_Prelude.Show.User) ->
          v.31 <- pure (CGrInt 4)
          pure v.31
      idr_Prelude.Show.primNumShow6_15 <- store idr_Prelude.Show.primNumShow6_val_13
      v.32 <- pure (CGrInt 5)
      idr_Prelude.Show.primNumShow7_val <- pure v.32
      idr_Prelude.Show.primNumShow7 <- store v.32
      idr_Prelude.Show.primNumShow6_val_12 <- idris_int_eq $ idr_Prelude.Show.primNumShow6_15 idr_Prelude.Show.primNumShow7
      idr_Prelude.Show.primNumShow6_16 <- store idr_Prelude.Show.primNumShow6_val_12
      idr_Prelude.Show.primNumShow6_val_17 <- fetch idr_Prelude.Show.primNumShow6_16
      case idr_Prelude.Show.primNumShow6_val_17 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0 of
            0 ->
              v.33 <- pure (Cidr_Prelude.Bool.False)
              pure v.33
            #default ->
              v.34 <- pure (Cidr_Prelude.Bool.True)
              pure v.34
        #default ->
          v.35 <- pure (Cidr_Prelude.Bool.True)
          pure v.35
  idr_Prelude.Show.primNumShow5_18 <- store idr_Prelude.Show.primNumShow5_val_7
  idr_Prelude.Show.primNumShow5_val_19 <- fetch idr_Prelude.Show.primNumShow5_18
  idr_Prelude.Show.primNumShow5_val <- case idr_Prelude.Show.primNumShow5_val_19 of
    (Cidr_Prelude.Bool.False) ->
      v.36 <- pure (Cidr_Prelude.Bool.False)
      pure v.36
    (Cidr_Prelude.Bool.True) ->
      v.37 <- pure (CGrString #"")
      idr_Prelude.Show.primNumShow6_val_23 <- pure v.37
      idr_Prelude.Show.primNumShow6_24 <- store v.37
      idr_Prelude.Show.primNumShow6_val_22 <- idris_str_eq $ idr_Prelude.Show.primNumShow4 idr_Prelude.Show.primNumShow6_24
      idr_Prelude.Show.primNumShow6_25 <- store idr_Prelude.Show.primNumShow6_val_22
      idr_Prelude.Show.primNumShow6_val_26 <- fetch idr_Prelude.Show.primNumShow6_25
      idr_Prelude.Show.primNumShow6_val_21 <- case idr_Prelude.Show.primNumShow6_val_26 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_27) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0_27 of
            0 ->
              v.38 <- pure (Cidr_Prelude.Bool.True)
              pure v.38
            #default ->
              v.39 <- pure (Cidr_Prelude.Bool.False)
              pure v.39
        #default ->
          v.40 <- pure (Cidr_Prelude.Bool.False)
          pure v.40
      idr_Prelude.Show.primNumShow6_28 <- store idr_Prelude.Show.primNumShow6_val_21
      v.41 <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow7_val_29 <- pure v.41
      idr_Prelude.Show.primNumShow7_30 <- store v.41
      idr_Prelude.Show.primNumShow6_val_20 <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" $ idr_Prelude.Show.primNumShow6_28 idr_Prelude.Show.primNumShow7_30
      idr_Prelude.Show.primNumShow6_31 <- store idr_Prelude.Show.primNumShow6_val_20
      idr_Prelude.Show.primNumShow6_val_32 <- fetch idr_Prelude.Show.primNumShow6_31
      case idr_Prelude.Show.primNumShow6_val_32 of
        (Cidr_Prelude.Basics.No) ->
          v.42 <- pure (Cidr_Prelude.Bool.False)
          pure v.42
        (Cidr_Prelude.Basics.Yes) ->
          idr_Prelude.Show.primNumShow7_val_34 <- idris_str_head $ idr_Prelude.Show.primNumShow4
          idr_Prelude.Show.primNumShow7_35 <- store idr_Prelude.Show.primNumShow7_val_34
          v.43 <- pure (CGrInt 45)
          idr_Prelude.Show.primNumShow8_val <- pure v.43
          idr_Prelude.Show.primNumShow8 <- store v.43
          idr_Prelude.Show.primNumShow7_val_33 <- idris_int_eq $ idr_Prelude.Show.primNumShow7_35 idr_Prelude.Show.primNumShow8
          idr_Prelude.Show.primNumShow7_36 <- store idr_Prelude.Show.primNumShow7_val_33
          idr_Prelude.Show.primNumShow7_val_37 <- fetch idr_Prelude.Show.primNumShow7_36
          case idr_Prelude.Show.primNumShow7_val_37 of
            (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_38) ->
              case idr_Prelude.Show.primNumShow_cpat_LInt64_0_38 of
                0 ->
                  v.44 <- pure (Cidr_Prelude.Bool.False)
                  pure v.44
                #default ->
                  v.45 <- pure (Cidr_Prelude.Bool.True)
                  pure v.45
            #default ->
              v.46 <- pure (Cidr_Prelude.Bool.True)
              pure v.46
  idr_Prelude.Show.primNumShow5_39 <- store idr_Prelude.Show.primNumShow5_val
  idr_Prelude.Show.primNumShow5_val_40 <- fetch idr_Prelude.Show.primNumShow5_39
  case idr_Prelude.Show.primNumShow5_val_40 of
    (Cidr_Prelude.Bool.False) ->
      fetch idr_Prelude.Show.primNumShow4
    (Cidr_Prelude.Bool.True) ->
      v.47 <- pure (CGrString #"(")
      idr_Prelude.Show.primNumShow6_val_41 <- pure v.47
      idr_Prelude.Show.primNumShow6_42 <- store v.47
      v.48 <- pure (CGrString #")")
      idr_Prelude.Show.primNumShow7_val_44 <- pure v.48
      idr_Prelude.Show.primNumShow7_45 <- store v.48
      idr_Prelude.Show.primNumShow7_val_43 <- idris_str_concat $ idr_Prelude.Show.primNumShow4 idr_Prelude.Show.primNumShow7_45
      idr_Prelude.Show.primNumShow7_46 <- store idr_Prelude.Show.primNumShow7_val_43
      idris_str_concat $ idr_Prelude.Show.primNumShow6_42 idr_Prelude.Show.primNumShow7_46

idr_prim__toStrBigInt idr_prim__toStrBigInt0 =
  idris_int_str $ idr_prim__toStrBigInt0

idr_Prelude.Interactive.printLn' idr_Prelude.Interactive.printLn'0 idr_Prelude.Interactive.printLn'1 idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3 idr_Prelude.Interactive.printLn'4 =
  idr_Prelude.Interactive.printLn'5_val_48 <- "idr_{APPLY_0}" $ idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3
  idr_Prelude.Interactive.printLn'5 <- store idr_Prelude.Interactive.printLn'5_val_48
  v.49 <- pure (CGrString #"\n")
  idr_Prelude.Interactive.printLn'6_val <- pure v.49
  idr_Prelude.Interactive.printLn'6 <- store v.49
  idr_Prelude.Interactive.printLn'5_val_47 <- idris_str_concat $ idr_Prelude.Interactive.printLn'5 idr_Prelude.Interactive.printLn'6
  idr_Prelude.Interactive.printLn'5_49 <- store idr_Prelude.Interactive.printLn'5_val_47
  idr_Prelude.Interactive.printLn'5_val <- idris_write_str $ idr_Prelude.Interactive.printLn'4 idr_Prelude.Interactive.printLn'5_49
  idr_Prelude.Interactive.printLn'5_50 <- store idr_Prelude.Interactive.printLn'5_val
  v.50 <- pure (Cidr_MkUnit)
  pure v.50

idr_Main.sum idr_Main.sum0 =
  idr_Main.sum0_val <- fetch idr_Main.sum0
  case idr_Main.sum0_val of
    (Cidr_Main.:: idr_Main.sum1 idr_Main.sum2) ->
      idr_Main.sum3_val_53 <- "idr_{EVAL_0}" $ idr_Main.sum2
      idr_Main.sum3 <- store idr_Main.sum3_val_53
      idr_Main.sum3_val <- idr_Main.sum $ idr_Main.sum3
      idr_Main.sum3_54 <- store idr_Main.sum3_val
      idris_int_add $ idr_Main.sum1 idr_Main.sum3_54
    (Cidr_Main.Nil) ->
      v.51 <- pure (CGrInt 0)
      pure v.51

idr_Main.upto idr_Main.upto0 idr_Main.upto1 =
  idr_Main.upto2_val <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" $ idr_Main.upto0 idr_Main.upto1
  idr_Main.upto2 <- store idr_Main.upto2_val
  idr_Main.upto2_val_55 <- fetch idr_Main.upto2
  case idr_Main.upto2_val_55 of
    (Cidr_Prelude.Interfaces.GT) ->
      v.52 <- pure (Cidr_Main.Nil)
      pure v.52
    #default ->
      v.53 <- pure (C"idr_{P_Main.{upto_1}_0}" idr_Main.upto0 idr_Main.upto1)
      idr_Main.upto3_val <- pure v.53
      idr_Main.upto3 <- store v.53
      v.54 <- pure (Cidr_Main.:: idr_Main.upto0 idr_Main.upto3)
      pure v.54

"idr_{APPLY_0}" "idr_{APPLY_0}0" "idr_{APPLY_0}1" =
  "idr_{APPLY_0}0_val" <- fetch "idr_{APPLY_0}0"
  case "idr_{APPLY_0}0_val" of
    (C"idr_{U_Main.{main_0}_1}") ->
      "idr_Main.{main_0}" $ "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Interactive.printLn'_1}" "idr_{APPLY_0}2" "idr_{APPLY_0}3" "idr_{APPLY_0}4" "idr_{APPLY_0}5") ->
      idr_Prelude.Interactive.printLn' $ "idr_{APPLY_0}2" "idr_{APPLY_0}3" "idr_{APPLY_0}4" "idr_{APPLY_0}5" "idr_{APPLY_0}1"
    (C"idr_{U_prim__toStrBigInt_1}") ->
      idr_prim__toStrBigInt $ "idr_{APPLY_0}1"
    #default ->
      v.55 <- pure (CErased)
      pure v.55

"idr_{EVAL_0}" "idr_{EVAL_0}0" =
  "idr_{EVAL_0}0_val" <- fetch "idr_{EVAL_0}0"
  case "idr_{EVAL_0}0_val" of
    (C"idr_{P_Main.{upto_1}_0}" "idr_{EVAL_0}1" "idr_{EVAL_0}2") ->
      "idr_{EVAL_0}0_val_56" <- "idr_Main.{upto_1}" $ "idr_{EVAL_0}1" "idr_{EVAL_0}2"
      update "idr_{EVAL_0}0" "idr_{EVAL_0}0_val_56"
      pure "idr_{EVAL_0}0_val_56"
    #default ->
      fetch "idr_{EVAL_0}0"

"idr_Main.{main_0}" "idr_Main.{main_0}0" =
  v.56 <- pure (CErased)
  "idr_Main.{main_0}1_val" <- pure v.56
  "idr_Main.{main_0}1" <- store v.56
  v.57 <- pure (C"idr_{U_prim__toStrBigInt_1}")
  "idr_Main.{main_0}2_val" <- pure v.57
  "idr_Main.{main_0}2" <- store v.57
  v.58 <- pure (Cidr_Prelude.Show.Open)
  "idr_Main.{main_0}3_val" <- pure v.58
  "idr_Main.{main_0}3" <- store v.58
  idr_Prelude.Show.primNumShow $ "idr_Main.{main_0}1" "idr_Main.{main_0}2" "idr_Main.{main_0}3" "idr_Main.{main_0}0"

"idr_{runMain_0}" =
  "idr_{runMain_0}0_val_57" <- idr_Main.main $
  "idr_{runMain_0}0" <- store "idr_{runMain_0}0_val_57"
  v.59 <- pure (CErased)
  "idr_{runMain_0}1_val" <- pure v.59
  "idr_{runMain_0}1" <- store v.59
  "idr_{runMain_0}0_val" <- "idr_{APPLY_0}" $ "idr_{runMain_0}0" "idr_{runMain_0}1"
  "idr_{runMain_0}0_58" <- store "idr_{runMain_0}0_val"
  "idr_{EVAL_0}" $ "idr_{runMain_0}0_58"

"idr_Main.{upto_1}" "idr_Main.{upto_1}0" "idr_Main.{upto_1}1" =
  v.60 <- pure (CGrInt 1)
  "idr_Main.{upto_1}2_val_59" <- pure v.60
  "idr_Main.{upto_1}2" <- store v.60
  "idr_Main.{upto_1}2_val" <- idris_int_add $ "idr_Main.{upto_1}0" "idr_Main.{upto_1}2"
  "idr_Main.{upto_1}2_60" <- store "idr_Main.{upto_1}2_val"
  idr_Main.upto $ "idr_Main.{upto_1}2_60" "idr_Main.{upto_1}1"

"idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01" =
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01"
  case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" of
    (Cidr_Prelude.Bool.False) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val" of
        (Cidr_Prelude.Bool.False) ->
          v.61 <- pure (Cidr_Prelude.Basics.Yes)
          pure v.61
        (Cidr_Prelude.Bool.True) ->
          v.62 <- pure (Cidr_Prelude.Basics.No)
          pure v.62
    (Cidr_Prelude.Bool.True) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_61" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_61" of
        (Cidr_Prelude.Bool.False) ->
          v.63 <- pure (Cidr_Prelude.Basics.No)
          pure v.63
        (Cidr_Prelude.Bool.True) ->
          v.64 <- pure (Cidr_Prelude.Basics.Yes)
          pure v.64

"idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01" =
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val" <- idris_int_eq $ "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_62" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02"
  case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_62" of
    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0") ->
      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0" of
        0 ->
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val" <- idris_int_lt $ "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_63" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03"
          case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_63" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_64") ->
              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_64" of
                0 ->
                  v.65 <- pure (Cidr_Prelude.Interfaces.GT)
                  pure v.65
                #default ->
                  v.66 <- pure (Cidr_Prelude.Interfaces.LT)
                  pure v.66
            #default ->
              v.67 <- pure (Cidr_Prelude.Interfaces.LT)
              pure v.67
        #default ->
          v.68 <- pure (Cidr_Prelude.Interfaces.EQ)
          pure v.68
    #default ->
      v.69 <- pure (Cidr_Prelude.Interfaces.EQ)
      pure v.69
