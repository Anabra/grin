
idris_int_eq idris_int_eq0 idris_int_eq1 =
  (CGrInt idris_int_eq0_1) <- fetch idris_int_eq0
  (CGrInt idris_int_eq1_1) <- fetch idris_int_eq1
  idris_int_eq2 <- _prim_int_eq $ idris_int_eq0_1 idris_int_eq1_1
  case idris_int_eq2 of
    #False ->
      v.0 <- pure (CGrInt 0)
      pure v.0
    #True ->
      v.1 <- pure (CGrInt 1)
      pure v.1

idris_int_lt idris_int_lt0 idris_int_lt1 =
  (CGrInt idris_int_lt0_1) <- fetch idris_int_lt0
  (CGrInt idris_int_lt1_1) <- fetch idris_int_lt1
  idris_int_lt2 <- _prim_int_lt $ idris_int_lt0_1 idris_int_lt1_1
  case idris_int_lt2 of
    #False ->
      v.2 <- pure (CGrInt 0)
      pure v.2
    #True ->
      v.3 <- pure (CGrInt 1)
      pure v.3

idris_lashr_int idris_lashr_int1 idris_lashr_int2 =
  (CGrInt idris_lashr_int1_0) <- fetch idris_lashr_int1
  (CGrInt idris_lashr_int2_0) <- fetch idris_lashr_int2
  idris_lashr_int3 <- _prim_int_ashr $ idris_lashr_int1_0 idris_lashr_int2_0
  v.4 <- pure (CGrInt idris_lashr_int3)
  pure v.4

idris_int_add idris_int_add0 idris_int_add1 =
  (CGrInt idris_int_add0_1) <- fetch idris_int_add0
  (CGrInt idris_int_add1_1) <- fetch idris_int_add1
  idris_int_add2 <- _prim_int_add $ idris_int_add0_1 idris_int_add1_1
  v.5 <- pure (CGrInt idris_int_add2)
  pure v.5

idris_int_sub idris_int_sub0 idris_int_sub1 =
  (CGrInt idris_int_sub0_1) <- fetch idris_int_sub0
  (CGrInt idris_int_sub1_1) <- fetch idris_int_sub1
  idris_int_sub2 <- _prim_int_sub $ idris_int_sub0_1 idris_int_sub1_1
  v.6 <- pure (CGrInt idris_int_sub2)
  pure v.6

idris_int_mul idris_int_mul0 idris_int_mul1 =
  (CGrInt idris_int_mul0_1) <- fetch idris_int_mul0
  (CGrInt idris_int_mul1_1) <- fetch idris_int_mul1
  idris_int_mul2 <- _prim_int_mul $ idris_int_mul0_1 idris_int_mul1_1
  v.7 <- pure (CGrInt idris_int_mul2)
  pure v.7

idris_write_str idris_write_str1 idris_write_str2 =
  (CGrString idris_write_str2_0) <- fetch idris_write_str2
  _prim_string_print $ idris_write_str2_0
  v.8 <- pure (CUnit)
  pure v.8

idris_str_concat idris_str_concat1 idris_str_concat2 =
  (CGrString idris_str_concat1_0) <- fetch idris_str_concat1
  (CGrString idris_str_concat2_0) <- fetch idris_str_concat2
  idris_str_concat3 <- _prim_string_concat $ idris_str_concat1_0 idris_str_concat2_0
  v.9 <- pure (CGrString idris_str_concat3)
  pure v.9

idris_str_eq idris_str_eq1 idris_str_eq2 =
  (CGrString idris_str_eq1_0) <- fetch idris_str_eq1
  (CGrString idris_str_eq2_0) <- fetch idris_str_eq2
  idris_str_eq3 <- _prim_string_eq $ idris_str_eq1_0 idris_str_eq2_0
  v.10 <- pure (CGrInt idris_str_eq3)
  pure v.10

idris_str_head idris_str_head1 =
  (CGrString idris_str_head1_0) <- fetch idris_str_head1
  idris_str_head2 <- _prim_string_head $ idris_str_head1_0
  v.11 <- pure (CGrInt idris_str_head2)
  pure v.11

idris_int_str idris_int_str1 =
  (CGrInt idris_int_str1_0) <- fetch idris_int_str1
  idris_int_str2 <- _prim_int_str $ idris_int_str1_0
  v.12 <- pure (CGrString idris_int_str2)
  pure v.12

grinMain =
  r <- "idr_{runMain_0}" $
  pure ()

idr_Main.main =
  v.13 <- pure (CErased)
  idr_Main.main0_val <- pure v.13
  idr_Main.main0 <- store idr_Main.main0_val
  v.14 <- pure (CErased)
  idr_Main.main1_val <- pure v.14
  idr_Main.main1 <- store idr_Main.main1_val
  v.15 <- pure (C"idr_{U_Main.{main_1}_1}")
  idr_Main.main2_val <- pure v.15
  idr_Main.main2 <- store idr_Main.main2_val
  v.16 <- pure (CErased)
  idr_Main.main3_val_3 <- pure v.16
  idr_Main.main3 <- store idr_Main.main3_val_3
  v.17 <- pure (CGrInt 100)
  idr_Main.main4_val <- pure v.17
  idr_Main.main4 <- store idr_Main.main4_val
  v.18 <- pure (CGrInt 52816)
  idr_Main.main5_val_4 <- pure v.18
  idr_Main.main5 <- store idr_Main.main5_val_4
  idr_Main.main5_val <- idr_Main.randoms $ idr_Main.main5
  idr_Main.main5_5 <- store idr_Main.main5_val
  idr_Main.main3_val <- idr_Prelude.Stream.take $ idr_Main.main3 idr_Main.main4 idr_Main.main5_5
  idr_Main.main3_6 <- store idr_Main.main3_val
  v.19 <- pure (C"idr_{U_Prelude.Interactive.printLn'_1}" idr_Main.main0 idr_Main.main1 idr_Main.main2 idr_Main.main3_6)
  pure v.19

idr_Prelude.Show.primNumShow idr_Prelude.Show.primNumShow0 idr_Prelude.Show.primNumShow1 idr_Prelude.Show.primNumShow2 idr_Prelude.Show.primNumShow3 =
  idr_Prelude.Show.primNumShow4_val <- "idr_{APPLY_0}" $ idr_Prelude.Show.primNumShow1 idr_Prelude.Show.primNumShow3
  idr_Prelude.Show.primNumShow4 <- store idr_Prelude.Show.primNumShow4_val
  idr_Prelude.Show.primNumShow2_val <- fetch idr_Prelude.Show.primNumShow2
  idr_Prelude.Show.primNumShow5_val_9 <- case idr_Prelude.Show.primNumShow2_val of
    (Cidr_Prelude.Show.App) ->
      v.20 <- pure (CGrInt 6)
      pure v.20
    (Cidr_Prelude.Show.Backtick) ->
      v.21 <- pure (CGrInt 3)
      pure v.21
    (Cidr_Prelude.Show.Dollar) ->
      v.22 <- pure (CGrInt 2)
      pure v.22
    (Cidr_Prelude.Show.Eq) ->
      v.23 <- pure (CGrInt 1)
      pure v.23
    (Cidr_Prelude.Show.Open) ->
      v.24 <- pure (CGrInt 0)
      pure v.24
    (Cidr_Prelude.Show.PrefixMinus) ->
      v.25 <- pure (CGrInt 5)
      pure v.25
    (Cidr_Prelude.Show.User) ->
      v.26 <- pure (CGrInt 4)
      pure v.26
  idr_Prelude.Show.primNumShow5 <- store idr_Prelude.Show.primNumShow5_val_9
  v.27 <- pure (CGrInt 5)
  idr_Prelude.Show.primNumShow6_val <- pure v.27
  idr_Prelude.Show.primNumShow6 <- store idr_Prelude.Show.primNumShow6_val
  idr_Prelude.Show.primNumShow5_val_8 <- "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" $ idr_Prelude.Show.primNumShow5 idr_Prelude.Show.primNumShow6
  idr_Prelude.Show.primNumShow5_10 <- store idr_Prelude.Show.primNumShow5_val_8
  idr_Prelude.Show.primNumShow5_val_11 <- fetch idr_Prelude.Show.primNumShow5_10
  idr_Prelude.Show.primNumShow5_val_7 <- case idr_Prelude.Show.primNumShow5_val_11 of
    (Cidr_Prelude.Interfaces.GT) ->
      v.28 <- pure (Cidr_Prelude.Bool.True)
      pure v.28
    #default ->
      idr_Prelude.Show.primNumShow2_val_14 <- fetch idr_Prelude.Show.primNumShow2
      idr_Prelude.Show.primNumShow6_val_13 <- case idr_Prelude.Show.primNumShow2_val_14 of
        (Cidr_Prelude.Show.App) ->
          v.29 <- pure (CGrInt 6)
          pure v.29
        (Cidr_Prelude.Show.Backtick) ->
          v.30 <- pure (CGrInt 3)
          pure v.30
        (Cidr_Prelude.Show.Dollar) ->
          v.31 <- pure (CGrInt 2)
          pure v.31
        (Cidr_Prelude.Show.Eq) ->
          v.32 <- pure (CGrInt 1)
          pure v.32
        (Cidr_Prelude.Show.Open) ->
          v.33 <- pure (CGrInt 0)
          pure v.33
        (Cidr_Prelude.Show.PrefixMinus) ->
          v.34 <- pure (CGrInt 5)
          pure v.34
        (Cidr_Prelude.Show.User) ->
          v.35 <- pure (CGrInt 4)
          pure v.35
      idr_Prelude.Show.primNumShow6_15 <- store idr_Prelude.Show.primNumShow6_val_13
      v.36 <- pure (CGrInt 5)
      idr_Prelude.Show.primNumShow7_val <- pure v.36
      idr_Prelude.Show.primNumShow7 <- store idr_Prelude.Show.primNumShow7_val
      idr_Prelude.Show.primNumShow6_val_12 <- idris_int_eq $ idr_Prelude.Show.primNumShow6_15 idr_Prelude.Show.primNumShow7
      idr_Prelude.Show.primNumShow6_16 <- store idr_Prelude.Show.primNumShow6_val_12
      idr_Prelude.Show.primNumShow6_val_17 <- fetch idr_Prelude.Show.primNumShow6_16
      case idr_Prelude.Show.primNumShow6_val_17 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0 of
            0 ->
              v.37 <- pure (Cidr_Prelude.Bool.False)
              pure v.37
            #default ->
              v.38 <- pure (Cidr_Prelude.Bool.True)
              pure v.38
        #default ->
          v.39 <- pure (Cidr_Prelude.Bool.True)
          pure v.39
  idr_Prelude.Show.primNumShow5_18 <- store idr_Prelude.Show.primNumShow5_val_7
  idr_Prelude.Show.primNumShow5_val_19 <- fetch idr_Prelude.Show.primNumShow5_18
  idr_Prelude.Show.primNumShow5_val <- case idr_Prelude.Show.primNumShow5_val_19 of
    (Cidr_Prelude.Bool.False) ->
      v.40 <- pure (Cidr_Prelude.Bool.False)
      pure v.40
    (Cidr_Prelude.Bool.True) ->
      v.41 <- pure (CGrString #"")
      idr_Prelude.Show.primNumShow6_val_23 <- pure v.41
      idr_Prelude.Show.primNumShow6_24 <- store idr_Prelude.Show.primNumShow6_val_23
      idr_Prelude.Show.primNumShow6_val_22 <- idris_str_eq $ idr_Prelude.Show.primNumShow4 idr_Prelude.Show.primNumShow6_24
      idr_Prelude.Show.primNumShow6_25 <- store idr_Prelude.Show.primNumShow6_val_22
      idr_Prelude.Show.primNumShow6_val_26 <- fetch idr_Prelude.Show.primNumShow6_25
      idr_Prelude.Show.primNumShow6_val_21 <- case idr_Prelude.Show.primNumShow6_val_26 of
        (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_27) ->
          case idr_Prelude.Show.primNumShow_cpat_LInt64_0_27 of
            0 ->
              v.42 <- pure (Cidr_Prelude.Bool.True)
              pure v.42
            #default ->
              v.43 <- pure (Cidr_Prelude.Bool.False)
              pure v.43
        #default ->
          v.44 <- pure (Cidr_Prelude.Bool.False)
          pure v.44
      idr_Prelude.Show.primNumShow6_28 <- store idr_Prelude.Show.primNumShow6_val_21
      v.45 <- pure (Cidr_Prelude.Bool.True)
      idr_Prelude.Show.primNumShow7_val_29 <- pure v.45
      idr_Prelude.Show.primNumShow7_30 <- store idr_Prelude.Show.primNumShow7_val_29
      idr_Prelude.Show.primNumShow6_val_20 <- "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" $ idr_Prelude.Show.primNumShow6_28 idr_Prelude.Show.primNumShow7_30
      idr_Prelude.Show.primNumShow6_31 <- store idr_Prelude.Show.primNumShow6_val_20
      idr_Prelude.Show.primNumShow6_val_32 <- fetch idr_Prelude.Show.primNumShow6_31
      case idr_Prelude.Show.primNumShow6_val_32 of
        (Cidr_Prelude.Basics.No) ->
          v.46 <- pure (Cidr_Prelude.Bool.False)
          pure v.46
        (Cidr_Prelude.Basics.Yes) ->
          idr_Prelude.Show.primNumShow7_val_34 <- idris_str_head $ idr_Prelude.Show.primNumShow4
          idr_Prelude.Show.primNumShow7_35 <- store idr_Prelude.Show.primNumShow7_val_34
          v.47 <- pure (CGrInt 45)
          idr_Prelude.Show.primNumShow8_val <- pure v.47
          idr_Prelude.Show.primNumShow8 <- store idr_Prelude.Show.primNumShow8_val
          idr_Prelude.Show.primNumShow7_val_33 <- idris_int_eq $ idr_Prelude.Show.primNumShow7_35 idr_Prelude.Show.primNumShow8
          idr_Prelude.Show.primNumShow7_36 <- store idr_Prelude.Show.primNumShow7_val_33
          idr_Prelude.Show.primNumShow7_val_37 <- fetch idr_Prelude.Show.primNumShow7_36
          case idr_Prelude.Show.primNumShow7_val_37 of
            (CGrInt idr_Prelude.Show.primNumShow_cpat_LInt64_0_38) ->
              case idr_Prelude.Show.primNumShow_cpat_LInt64_0_38 of
                0 ->
                  v.48 <- pure (Cidr_Prelude.Bool.False)
                  pure v.48
                #default ->
                  v.49 <- pure (Cidr_Prelude.Bool.True)
                  pure v.49
            #default ->
              v.50 <- pure (Cidr_Prelude.Bool.True)
              pure v.50
  idr_Prelude.Show.primNumShow5_39 <- store idr_Prelude.Show.primNumShow5_val
  idr_Prelude.Show.primNumShow5_val_40 <- fetch idr_Prelude.Show.primNumShow5_39
  case idr_Prelude.Show.primNumShow5_val_40 of
    (Cidr_Prelude.Bool.False) ->
      fetch idr_Prelude.Show.primNumShow4
    (Cidr_Prelude.Bool.True) ->
      v.51 <- pure (CGrString #"(")
      idr_Prelude.Show.primNumShow6_val_41 <- pure v.51
      idr_Prelude.Show.primNumShow6_42 <- store idr_Prelude.Show.primNumShow6_val_41
      v.52 <- pure (CGrString #")")
      idr_Prelude.Show.primNumShow7_val_44 <- pure v.52
      idr_Prelude.Show.primNumShow7_45 <- store idr_Prelude.Show.primNumShow7_val_44
      idr_Prelude.Show.primNumShow7_val_43 <- idris_str_concat $ idr_Prelude.Show.primNumShow4 idr_Prelude.Show.primNumShow7_45
      idr_Prelude.Show.primNumShow7_46 <- store idr_Prelude.Show.primNumShow7_val_43
      idris_str_concat $ idr_Prelude.Show.primNumShow6_42 idr_Prelude.Show.primNumShow7_46

idr_prim__toStrInt idr_prim__toStrInt0 =
  idris_int_str $ idr_prim__toStrInt0

idr_Prelude.Interactive.printLn' idr_Prelude.Interactive.printLn'0 idr_Prelude.Interactive.printLn'1 idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3 idr_Prelude.Interactive.printLn'4 =
  idr_Prelude.Interactive.printLn'5_val_48 <- "idr_{APPLY_0}" $ idr_Prelude.Interactive.printLn'2 idr_Prelude.Interactive.printLn'3
  idr_Prelude.Interactive.printLn'5 <- store idr_Prelude.Interactive.printLn'5_val_48
  v.53 <- pure (CGrString #"\n")
  idr_Prelude.Interactive.printLn'6_val <- pure v.53
  idr_Prelude.Interactive.printLn'6 <- store idr_Prelude.Interactive.printLn'6_val
  idr_Prelude.Interactive.printLn'5_val_47 <- idris_str_concat $ idr_Prelude.Interactive.printLn'5 idr_Prelude.Interactive.printLn'6
  idr_Prelude.Interactive.printLn'5_49 <- store idr_Prelude.Interactive.printLn'5_val_47
  idr_Prelude.Interactive.printLn'5_val <- idris_write_str $ idr_Prelude.Interactive.printLn'4 idr_Prelude.Interactive.printLn'5_49
  idr_Prelude.Interactive.printLn'5_50 <- store idr_Prelude.Interactive.printLn'5_val
  v.54 <- pure (Cidr_MkUnit)
  pure v.54

idr_Main.randoms idr_Main.randoms0 =
  v.55 <- pure (CGrInt 1664525)
  idr_Main.randoms1_val_52 <- pure v.55
  idr_Main.randoms1 <- store idr_Main.randoms1_val_52
  idr_Main.randoms1_val_51 <- idris_int_mul $ idr_Main.randoms1 idr_Main.randoms0
  idr_Main.randoms1_53 <- store idr_Main.randoms1_val_51
  v.56 <- pure (CGrInt 1013904223)
  idr_Main.randoms2_val <- pure v.56
  idr_Main.randoms2 <- store idr_Main.randoms2_val
  idr_Main.randoms1_val <- idris_int_add $ idr_Main.randoms1_53 idr_Main.randoms2
  idr_Main.randoms1_54 <- store idr_Main.randoms1_val
  v.57 <- pure (CGrInt 2)
  idr_Main.randoms2_val_56 <- pure v.57
  idr_Main.randoms2_57 <- store idr_Main.randoms2_val_56
  idr_Main.randoms2_val_55 <- idris_lashr_int $ idr_Main.randoms1_54 idr_Main.randoms2_57
  idr_Main.randoms2_58 <- store idr_Main.randoms2_val_55
  v.58 <- pure (C"idr_{P_Main.{randoms_2}_0}" idr_Main.randoms1_54)
  idr_Main.randoms3_val <- pure v.58
  idr_Main.randoms3 <- store idr_Main.randoms3_val
  v.59 <- pure (Cidr_Prelude.Stream.:: idr_Main.randoms2_58 idr_Main.randoms3)
  pure v.59

idr_Prelude.Stream.take idr_Prelude.Stream.take0 idr_Prelude.Stream.take1 idr_Prelude.Stream.take2 =
  idr_Prelude.Stream.take1_val <- fetch idr_Prelude.Stream.take1
  case idr_Prelude.Stream.take1_val of
    (CGrInt idr_Prelude.Stream.take_cpat_LInt64_0) ->
      case idr_Prelude.Stream.take_cpat_LInt64_0 of
        0 ->
          v.60 <- pure (Cidr_Prelude.List.Nil)
          pure v.60
        #default ->
          idr_Prelude.Stream.take2_val <- fetch idr_Prelude.Stream.take2
          do
            (Cidr_Prelude.Stream.:: idr_Prelude.Stream.take3 idr_Prelude.Stream.take4) <- pure idr_Prelude.Stream.take2_val
            v.61 <- pure (CErased)
            idr_Prelude.Stream.take5_val_61 <- pure v.61
            idr_Prelude.Stream.take5 <- store idr_Prelude.Stream.take5_val_61
            v.62 <- pure (CGrInt 1)
            idr_Prelude.Stream.take6_val_62 <- pure v.62
            idr_Prelude.Stream.take6 <- store idr_Prelude.Stream.take6_val_62
            idr_Prelude.Stream.take6_val <- idris_int_sub $ idr_Prelude.Stream.take1 idr_Prelude.Stream.take6
            idr_Prelude.Stream.take6_63 <- store idr_Prelude.Stream.take6_val
            idr_Prelude.Stream.take7_val <- "idr_{EVAL_0}" $ idr_Prelude.Stream.take4
            idr_Prelude.Stream.take7 <- store idr_Prelude.Stream.take7_val
            idr_Prelude.Stream.take5_val <- idr_Prelude.Stream.take $ idr_Prelude.Stream.take5 idr_Prelude.Stream.take6_63 idr_Prelude.Stream.take7
            idr_Prelude.Stream.take5_64 <- store idr_Prelude.Stream.take5_val
            v.63 <- pure (Cidr_Prelude.List.:: idr_Prelude.Stream.take3 idr_Prelude.Stream.take5_64)
            pure v.63
    #default ->
      idr_Prelude.Stream.take2_val_65 <- fetch idr_Prelude.Stream.take2
      do
        (Cidr_Prelude.Stream.:: idr_Prelude.Stream.take3_66 idr_Prelude.Stream.take4_67) <- pure idr_Prelude.Stream.take2_val_65
        v.64 <- pure (CErased)
        idr_Prelude.Stream.take5_val_69 <- pure v.64
        idr_Prelude.Stream.take5_70 <- store idr_Prelude.Stream.take5_val_69
        v.65 <- pure (CGrInt 1)
        idr_Prelude.Stream.take6_val_72 <- pure v.65
        idr_Prelude.Stream.take6_73 <- store idr_Prelude.Stream.take6_val_72
        idr_Prelude.Stream.take6_val_71 <- idris_int_sub $ idr_Prelude.Stream.take1 idr_Prelude.Stream.take6_73
        idr_Prelude.Stream.take6_74 <- store idr_Prelude.Stream.take6_val_71
        idr_Prelude.Stream.take7_val_75 <- "idr_{EVAL_0}" $ idr_Prelude.Stream.take4_67
        idr_Prelude.Stream.take7_76 <- store idr_Prelude.Stream.take7_val_75
        idr_Prelude.Stream.take5_val_68 <- idr_Prelude.Stream.take $ idr_Prelude.Stream.take5_70 idr_Prelude.Stream.take6_74 idr_Prelude.Stream.take7_76
        idr_Prelude.Stream.take5_77 <- store idr_Prelude.Stream.take5_val_68
        v.66 <- pure (Cidr_Prelude.List.:: idr_Prelude.Stream.take3_66 idr_Prelude.Stream.take5_77)
        pure v.66

"idr_{APPLY_0}" "idr_{APPLY_0}0" "idr_{APPLY_0}1" =
  "idr_{APPLY_0}0_val" <- fetch "idr_{APPLY_0}0"
  case "idr_{APPLY_0}0_val" of
    (C"idr_{U_Main.{main_0}_1}") ->
      "idr_Main.{main_0}" $ "idr_{APPLY_0}1"
    (C"idr_{U_Main.{main_1}_1}") ->
      "idr_Main.{main_1}" $ "idr_{APPLY_0}1"
    (C"idr_{U_Prelude.Interactive.printLn'_1}" "idr_{APPLY_0}2" "idr_{APPLY_0}3" "idr_{APPLY_0}4" "idr_{APPLY_0}5") ->
      idr_Prelude.Interactive.printLn' $ "idr_{APPLY_0}2" "idr_{APPLY_0}3" "idr_{APPLY_0}4" "idr_{APPLY_0}5" "idr_{APPLY_0}1"
    (C"idr_{U_prim__toStrInt_1}") ->
      idr_prim__toStrInt $ "idr_{APPLY_0}1"
    #default ->
      v.67 <- pure (CErased)
      pure v.67

"idr_{EVAL_0}" "idr_{EVAL_0}0" =
  "idr_{EVAL_0}0_val" <- fetch "idr_{EVAL_0}0"
  case "idr_{EVAL_0}0_val" of
    (C"idr_{P_Main.{randoms_2}_0}" "idr_{EVAL_0}1") ->
      "idr_{EVAL_0}0_val_78" <- "idr_Main.{randoms_2}" $ "idr_{EVAL_0}1"
      update "idr_{EVAL_0}0" "idr_{EVAL_0}0_val_78"
      pure "idr_{EVAL_0}0_val_78"
    #default ->
      fetch "idr_{EVAL_0}0"

"idr_Main.{main_0}" "idr_Main.{main_0}0" =
  v.68 <- pure (CErased)
  "idr_Main.{main_0}1_val" <- pure v.68
  "idr_Main.{main_0}1" <- store "idr_Main.{main_0}1_val"
  v.69 <- pure (C"idr_{U_prim__toStrInt_1}")
  "idr_Main.{main_0}2_val" <- pure v.69
  "idr_Main.{main_0}2" <- store "idr_Main.{main_0}2_val"
  v.70 <- pure (Cidr_Prelude.Show.Open)
  "idr_Main.{main_0}3_val" <- pure v.70
  "idr_Main.{main_0}3" <- store "idr_Main.{main_0}3_val"
  idr_Prelude.Show.primNumShow $ "idr_Main.{main_0}1" "idr_Main.{main_0}2" "idr_Main.{main_0}3" "idr_Main.{main_0}0"

"idr_{runMain_0}" =
  "idr_{runMain_0}0_val_79" <- idr_Main.main $
  "idr_{runMain_0}0" <- store "idr_{runMain_0}0_val_79"
  v.71 <- pure (CErased)
  "idr_{runMain_0}1_val" <- pure v.71
  "idr_{runMain_0}1" <- store "idr_{runMain_0}1_val"
  "idr_{runMain_0}0_val" <- "idr_{APPLY_0}" $ "idr_{runMain_0}0" "idr_{runMain_0}1"
  "idr_{runMain_0}0_80" <- store "idr_{runMain_0}0_val"
  "idr_{EVAL_0}" $ "idr_{runMain_0}0_80"

"idr_Main.{main_1}" "idr_Main.{main_1}0" =
  v.72 <- pure (CGrString #"[")
  "idr_Main.{main_1}1_val" <- pure v.72
  "idr_Main.{main_1}1" <- store "idr_Main.{main_1}1_val"
  v.73 <- pure (CErased)
  "idr_Main.{main_1}2_val_82" <- pure v.73
  "idr_Main.{main_1}2" <- store "idr_Main.{main_1}2_val_82"
  v.74 <- pure (CErased)
  "idr_Main.{main_1}3_val" <- pure v.74
  "idr_Main.{main_1}3" <- store "idr_Main.{main_1}3_val"
  v.75 <- pure (C"idr_{U_Main.{main_0}_1}")
  "idr_Main.{main_1}4_val" <- pure v.75
  "idr_Main.{main_1}4" <- store "idr_Main.{main_1}4_val"
  v.76 <- pure (CGrString #"")
  "idr_Main.{main_1}5_val" <- pure v.76
  "idr_Main.{main_1}5" <- store "idr_Main.{main_1}5_val"
  "idr_Main.{main_1}2_val_81" <- "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0" $ "idr_Main.{main_1}2" "idr_Main.{main_1}3" "idr_Main.{main_1}4" "idr_Main.{main_1}5" "idr_Main.{main_1}0"
  "idr_Main.{main_1}2_83" <- store "idr_Main.{main_1}2_val_81"
  v.77 <- pure (CGrString #"]")
  "idr_Main.{main_1}3_val_84" <- pure v.77
  "idr_Main.{main_1}3_85" <- store "idr_Main.{main_1}3_val_84"
  "idr_Main.{main_1}2_val" <- idris_str_concat $ "idr_Main.{main_1}2_83" "idr_Main.{main_1}3_85"
  "idr_Main.{main_1}2_86" <- store "idr_Main.{main_1}2_val"
  idris_str_concat $ "idr_Main.{main_1}1" "idr_Main.{main_1}2_86"

"idr_Main.{randoms_2}" "idr_Main.{randoms_2}0" =
  idr_Main.randoms $ "idr_Main.{randoms_2}0"

"idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':00" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':01" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04" =
  "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04_val" <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04"
  case "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':04_val" of
    (Cidr_Prelude.List.:: "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06") ->
      "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06_val" <- fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06"
      case "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06_val" of
        (Cidr_Prelude.List.Nil) ->
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val" <- "idr_{APPLY_0}" $ "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val"
          idris_str_concat $ "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07"
        #default ->
          v.78 <- pure (CErased)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val_87" <- pure v.78
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_88" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_val_87"
          v.79 <- pure (CErased)
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':08_val" <- pure v.79
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':08" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':08_val"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_90" <- "idr_{APPLY_0}" $ "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':05"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_90"
          v.80 <- pure (CGrString #", ")
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010_val" <- pure v.80
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010_val"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_89" <- idris_str_concat $ "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':010"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_91" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val_89"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val" <- idris_str_concat $ "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_91"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_92" <- store "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_val"
          "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':0" $ "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':07_88" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':08" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':02" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':09_92" "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':06"
    (Cidr_Prelude.List.Nil) ->
      fetch "idr_Prelude.Show.Prelude.Show.@Prelude.Show.Show$List a:!show:0:show':03"

"idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:0" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00" "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01" =
  "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01"
  case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:01_val" of
    (Cidr_Prelude.Bool.False) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val" of
        (Cidr_Prelude.Bool.False) ->
          v.81 <- pure (Cidr_Prelude.Basics.Yes)
          pure v.81
        (Cidr_Prelude.Bool.True) ->
          v.82 <- pure (Cidr_Prelude.Basics.No)
          pure v.82
    (Cidr_Prelude.Bool.True) ->
      "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_93" <- fetch "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00"
      case "idr_Decidable.Equality.Decidable.Equality.@Decidable.Equality.DecEq$Bool:!decEq:00_val_93" of
        (Cidr_Prelude.Bool.False) ->
          v.83 <- pure (Cidr_Prelude.Basics.No)
          pure v.83
        (Cidr_Prelude.Bool.True) ->
          v.84 <- pure (Cidr_Prelude.Basics.Yes)
          pure v.84

"idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01" =
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val" <- idris_int_eq $ "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val"
  "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_94" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02"
  case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:02_val_94" of
    (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0") ->
      case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0" of
        0 ->
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val" <- idris_int_lt $ "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:00" "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:01"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03" <- store "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val"
          "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_95" <- fetch "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03"
          case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:03_val_95" of
            (CGrInt "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_96") ->
              case "idr_Prelude.Interfaces.Prelude.Interfaces.@Prelude.Interfaces.Ord$Integer:!compare:0_cpat_LInt64_0_96" of
                0 ->
                  v.85 <- pure (Cidr_Prelude.Interfaces.GT)
                  pure v.85
                #default ->
                  v.86 <- pure (Cidr_Prelude.Interfaces.LT)
                  pure v.86
            #default ->
              v.87 <- pure (Cidr_Prelude.Interfaces.LT)
              pure v.87
        #default ->
          v.88 <- pure (Cidr_Prelude.Interfaces.EQ)
          pure v.88
    #default ->
      v.89 <- pure (Cidr_Prelude.Interfaces.EQ)
      pure v.89
