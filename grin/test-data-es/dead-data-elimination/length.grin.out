ffi effectful
  _prim_int_print :: T_Int64
                  -> T_Unit

primop pure
  _prim_int_gt :: T_Int64
               -> T_Int64
               -> T_Bool
  _prim_int_add :: T_Int64
                -> T_Int64
                -> T_Int64

grinMain =
  k0 <- pure 1
  n1 <- pure (CInt k0)
  t1 <- store n1
  k1 <- pure 10000
  n2 <- pure (CInt k1)
  t2 <- store n2
  n3 <- pure (Fupto t1 t2)
  t3 <- store n3
  n4 <- pure (Flength t3)
  t4 <- store n4
  n5 <- eval $ t4
  (CInt r') @ _1 <- pure n5
  _prim_int_print $ r'

upto m n =
  n6 <- eval $ m
  (CInt m') @ _2 <- pure n6
  n7 <- eval $ n
  (CInt n') @ _3 <- pure n7
  b' <- _prim_int_gt $ m' n'
  case b' of
    #True @ altT ->
      n8 <- pure (CNil)
      pure n8
    #False @ altF ->
      k2 <- pure 1
      m1' <- _prim_int_add $ m' k2
      n9 <- pure (CInt m1')
      m1 <- store n9
      n10 <- pure (Fupto m1 n)
      p <- store n10
      n11 <- pure (CCons.0 p)
      pure n11

length l =
  l2 <- eval $ l
  case l2 of
    (CNil) @ alt1 ->
      k3 <- pure 0
      n12 <- pure (CInt k3)
      pure n12
    (CCons.0 xs) @ alt2 ->
      x <- pure (#undefined :: #ptr)
      n13 <- length $ xs
      (CInt l') @ _4 <- pure n13
      k4 <- pure 1
      len <- _prim_int_add $ l' k4
      n14 <- pure (CInt len)
      pure n14

eval q =
  v <- fetch q
  case v of
    (CInt x'1) @ alt3 ->
      pure v
    (CNil) @ alt4 ->
      pure v
    (CCons.0 ys) @ alt5 ->
      y <- pure (#undefined :: #ptr)
      pure v
    (Fupto a b) @ alt6 ->
      w <- upto $ a b
      _5 <- update q w
      pure w
    (Flength c) @ alt7 ->
      z <- length $ c
      _6 <- update q z
      pure z
